# **Postman API Testing Snippets**

## **1. Status Code Validation**
```js
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
```
? Ensures the API returns a **200 OK** response.

---

## **2. Response Body Validation**
```js
pm.test("Response contains expected order ID", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.orderId).to.eql("ORDER456");
});
```
? Validates that the response contains the correct **orderId**.

---

## **3. Header Validation**
```js
pm.test("Content-Type is JSON", function () {
    pm.response.to.have.header("Content-Type", "application/json");
});
```
? Ensures the response header contains **Content-Type: application/json**.

---

## **4. Response Time Validation**
```js
pm.test("Response time is within limit", function () {
    pm.expect(pm.response.responseTime).to.be.below(2000);
});
```
? Ensures the API responds within **2 seconds (2000ms)**.

---

## **5. JSON Schema Validation**
```js
const schema = {
    "type": "object",
    "properties": {
        "orderId": { "type": "string" },
        "status": { "type": "string" },
        "items": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "foodItem": { "type": "string" },
                    "quantity": { "type": "integer" }
                },
                "required": ["foodItem", "quantity"]
            }
        },
        "totalAmount": { "type": "integer" }
    },
    "required": ["orderId", "status", "items", "totalAmount"]
};

pm.test("Response follows JSON schema", function () {
    pm.response.to.have.jsonSchema(schema);
});
```
? Ensures the response structure matches the expected JSON **schema**.

---

## **6. Dynamic API Chaining (Extract & Reuse Data)**
### **Save a Value for Next Request**
```js
var jsonData = pm.response.json();
pm.environment.set("orderId", jsonData.orderId);
```
? Stores `orderId` in Postman **environment variables** for reuse.

### **Use Stored Value in Next API Request**
```js
GET /api/order/{{orderId}}
```
? Uses **`{{orderId}}`** dynamically in another API request.

---

## **7. Validate Presence of a Value in an Array**
```js
pm.test("Response contains item with name 'Burger'", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.items.some(item => item.foodItem === "Burger")).to.be.true;
});
```
? Checks if **"Burger"** exists in the `items` array.

---

## **8. Negative Test Cases (Error Handling)**
### **Check for 404 Error (Not Found)**
```js
pm.test("API returns 404 for invalid order", function () {
    pm.response.to.have.status(404);
});
```
? Ensures an invalid order ID returns **404 Not Found**.

### **Check for Error Messa